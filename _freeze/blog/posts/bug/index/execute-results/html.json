{
  "hash": "6c3ddcc36019572ed7c0792b2d25f8b8",
  "result": {
    "markdown": "---\ntitle: \"Bug dans gtsummary\"\ndescription: \"Info provisoire\"\nauthor: \"Philippe MICHEL\"\ncategories:\n  - R\nwarning: false\n---\n\n\nJ'utilise au quotidien le package [`gtsummary`](https://www.danieldsjoberg.com/gtsummary/index.html) pour la production de mes rapports & pour être plus précis afin de générer les nombreux tableaux nécessaires : tables démographiques, résultats des modèles (monovarié ou régression), analyse de survie etc. \n\nCe package, bien vivant, dont la documentation est très bien faite, est en constante évolution & la version 2.0 vient de sortir. \n\nPrécisons le rôle de `gtsummary` : ce package génère les tableaux (calcul des effectifs, des p-value, etc.) mais pour l'affichage s'appuie sur divers packages dont `kable` (par défaut jusque là) & `gt` (par défaut sur la version 2.0).\n\nMais voilà, j'ai rencontré un bug (mais uniquement dans Quarto sur des sortie en pdf) dans la version 2.0 de `gtsummary` sur la fonction `tbl_summary` qui génère les tableaux de résultats descriptifs . Voici un exemple simple :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gtsummary)\n\ntrial |> # On charge le jeu de données  \n  dplyr::select(trt, age, grade) |> # On sélectionne les variables d'intérêt\n  tbl_summary(\n    by = trt # On présente les données selon la classe de traitement\n  )\n```\n:::\n\n\nLe résultat est le suivant :\n\n![bug1](bug1.png)\n\nalors qu'on devrait avoir les titres des colonnes (DrugA & DrugB) & les effectifs en tête des deux colonnes. \n\nJ'ai ouvert un [issue](https://github.com/ddsjoberg/gtsummary/issues/1896) sur le github de `gtsummary` & le fautif a été identifié : c'est la génération du tableau via `gt` qui est en cause. En attnedant la correction, il est possible de contourner le problème en utilisant `kable` ou `kableExtra` pour l'affichage des tableaux. Voici un exemple :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gtsummary)\n\ntrial |> # On charge le jeu de données  \n  dplyr::select(trt, age, grade) |> # On sélectionne les variables d'intérêt\n  tbl_summary(\n    by = trt # On présente les données selon la classe de traitement\n  ) |> \n  as_kable() # On sort un objet kable\n```\n\n::: {.cell-output-display}\n|**Characteristic** | **Drug A**  N = 98 | **Drug B**  N = 102 |\n|:------------------|:------------------:|:-------------------:|\n|Age                |    46 (37, 60)     |     48 (39, 56)     |\n|Unknown            |         7          |          4          |\n|Grade              |                    |                     |\n|I                  |      35 (36%)      |      33 (32%)       |\n|II                 |      32 (33%)      |      36 (35%)       |\n|III                |      31 (32%)      |      33 (32%)       |\n:::\n:::\n\n\nPersonnellement je préfère [`kableExtra`](https://haozhu233.github.io/kableExtra/)) pour les sorties en pdf  : il permet des réglages plus fins dans $\\LaTeX$ comme de choisir si on utilise `booktabs` ou `longtable`, de gérer les flottants etc. Ce qui donne : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gtsummary)\n\ntrial |> # On charge le jeu de données  \n  dplyr::select(trt, age, grade) |> # On sélectionne les variables d'intérêt\n  tbl_summary(\n    by = trt # On présente les données selon la classe de traitement\n  ) |> \n      as_kable_extra(longtable = FALSE, booktabs = TRUE) |>\n      kable_styling(latex_options = c(\"HOLD_position\", \"scale_down\", \"repeat_header\"))\n```\n:::\n\n\n:::{.callout-tip}\n## Pour me joindre\n\nUn simple mail à <a href=\"mailto:docphilmstat@gmail.com\">docphilmstat@gmail.com</a> ou un message sur [Twitter](https://twitter.com/PhiippeMICHEL) & je vous répondrai dans les plus brefs délais.\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}