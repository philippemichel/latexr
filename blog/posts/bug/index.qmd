---
title: "Bug dans gtsummary"
description: "Info provisoire"
author: "Philippe MICHEL"
categories:
  - R
warning: false
---

J'utilise au quotidien le package [`gtsummary`](https://www.danieldsjoberg.com/gtsummary/index.html) pour la production de mes rapports & pour être plus précis afin de générer les nombreux tableaux nécessaires : tables démographiques, résultats des modèles (monovarié ou régression), analyse de survie etc. 

Ce package, bien vivant, dont la documentation est très bien faite, est en constante évolution & la version 2.0 vient de sortir. 

Précisons le rôle de `gtsummary` : ce package génère les tableaux (calcul des effectifs, des p-value, etc.) mais pour l'affichage s'appuie sur divers packages dont `kable` (par défaut jusque là) & `gt` (par défaut sur la version 2.0).

Mais voilà, j'ai rencontré un bug (mais uniquement dans Quarto sur des sortie en pdf) dans la version 2.0 de `gtsummary` sur la fonction `tbl_summary` qui génère les tableaux de résultats descriptifs . Voici un exemple simple :

```{r}
#| label: bug1
#| eval: false

library(gtsummary)

trial |> # On charge le jeu de données  
  dplyr::select(trt, age, grade) |> # On sélectionne les variables d'intérêt
  tbl_summary(
    by = trt # On présente les données selon la classe de traitement
  )
```

Le résultat est le suivant :

![bug1](bug1.png)

alors qu'on devrait avoir les titres des colonnes (DrugA & DrugB) & les effectifs en tête des deux colonnes. 

J'ai ouvert un [issue](https://github.com/ddsjoberg/gtsummary/issues/1896) sur le github de `gtsummary` & le fautif a été identifié : c'est la génération du tableau via `gt` qui est en cause. En attnedant la correction, il est possible de contourner le problème en utilisant `kable` ou `kableExtra` pour l'affichage des tableaux. Voici un exemple :

```{r}
#| label: bug2
#| eval: true

library(gtsummary)

trial |> # On charge le jeu de données  
  dplyr::select(trt, age, grade) |> # On sélectionne les variables d'intérêt
  tbl_summary(
    by = trt # On présente les données selon la classe de traitement
  ) |> 
  as_kable() # On sort un objet kable
```

Personnellement je préfère [`kableExtra`](https://haozhu233.github.io/kableExtra/)) pour les sorties en pdf  : il permet des réglages plus fins dans $\LaTeX$ comme de choisir si on utilise `booktabs` ou `longtable`, de gérer les flottants etc. Ce qui donne : 

```{r}
#| label: bug3
#| eval: false

library(gtsummary)

trial |> # On charge le jeu de données  
  dplyr::select(trt, age, grade) |> # On sélectionne les variables d'intérêt
  tbl_summary(
    by = trt # On présente les données selon la classe de traitement
  ) |> 
      as_kable_extra(longtable = FALSE, booktabs = TRUE) |>
      kable_styling(latex_options = c("HOLD_position", "scale_down", "repeat_header"))
```

:::{.callout-tip}
## Pour me joindre

Un simple mail à <a href="mailto:docphilmstat@gmail.com">docphilmstat@gmail.com</a> ou un message sur [Twitter](https://twitter.com/PhiippeMICHEL) & je vous répondrai dans les plus brefs délais.
:::

